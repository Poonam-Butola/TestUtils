{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","navMode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","home","name","onClick","toggleMode","value","htmlFor","style","color","theme","pallete","Textform","_useState","useState","_useState2","_slicedToArray","text","setText","textmode","heading","placeholder","rows","onChange","event","target","backgroundColor","textarea","document","getElementById","newText","toUpperCase","showAlert","console","log","toLowerCase","copyText","navigator","clipboard","writeText","trimText","replace","split","length","alert","word","role","charAt","slice","msg","App","mode","setMode","_useState3","_useState4","modeText","setModetext","_useState5","_useState6","setAlert","message","setTimeout","showModetext","Fragment","about","body","cls","classList","remove","add","Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.b5a9bdf4.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n// import {\n//   Link\n// } from 'react-router-dom';\n\nexport default function Navbar(props) {\n\n \n    return (\n      \n\n  <div className='mainnavbar'>\n<nav className={`navbar navbar-expand-lg  navbar-${props.navMode} bg-${props.navMode}`}>\n    <div className=\"container-fluid\">\n      <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n          <li className=\"nav-item\">\n            {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">{props.home}</Link> */}\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">{props.home}</a>\n          </li>\n          <li className=\"nav-item\">\n            {/* <Link className=\"nav-link\" to=\"/about\">{props.about}</Link> */}\n          </li>\n        </ul>\n        {/* <form className=\"d-flex\" role=\"search\">\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n          <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n        </form> */}\n      </div>\n    </div>\n    \n    <div className=\"colorPallette\">\n   \n       <div className=\"form-check form-switch\">\n           <input className={`form-check-input btn-outline-primary  mode-${props.navMode}`} type=\"checkbox\"  name=\"inlineRadioOptions\" id=\"inlineRadio3\" onClick={props.toggleMode} value=\"option3\"/>\n           \n           <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" style={{color:props.navMode===\"light\"?\"black\":\"white\"}}>{props.navMode===\"dark\"?props.theme:\"Enable light mode theme\"}</label>\n       </div>\n\n       <div className=\"d-flex p-2 bg-primary me-2\"  onClick={()=>{props.pallete('primary')}}></div>\n       <div className=\"d-flex p-2 bg-warning me-2\"  onClick={()=>{props.pallete('warning')}} ></div>\n       <div className=\"d-flex p-2 bg-success\"  onClick={()=>{props.pallete('success')}} ></div>\n\n      \n       </div>\n\n  </nav>\n  </div>\n    );\n}\n\n// Navbar.propTypes = {\n//   title: PropTypes.string,\n// home: PropTypes.string,\n// about: PropTypes.string\n// }\n\n// Navbar.defaultProps = {\n//   title: \"Test Utility\",\n//   about: \"About Us\"\n// }","import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\n\nexport default function Textform (props){\n    const [text, setText] = useState (\"\");\n\n   const convertUpcase = () =>{\n    let textarea = document.getElementById('message');\n   // console.log(\"button clicked\");\n    let newText = text.toUpperCase();\n    setText(newText);\n    textarea.value = newText;\n    props.showAlert(\"Converted to uppercase case\" , \"success\");\n   }\n   const convertLwcase = () =>{\n    let textarea = document.getElementById('message');\n    console.log(\"button clicked\");\n    let newText = text.toLowerCase();\n    setText(newText);\n    textarea.value = newText;\n    props.showAlert(\"Converted to lower case\" , \"success\");\n   }\n\n   const onchangehandler = (event) =>{\n  // console.log(\"area clicked\");\n   setText (event.target.value);\n\n\n   }\n  \n   const submitValue = ()=>{\n    //console.log(\"submit button clicked\");\n    let div = document.createElement(\"div\");\n    let textarea = document.getElementById('message');\n    div.innerHTML =  textarea.value;\n    document.getElementById(\"block_main\").appendChild(div);\n\n   }\n\n   const clearText = () =>{\n     let newText = \"\";\n     setText(newText);\n     let textarea = document.getElementById('message');\n     textarea.value = \"\";\n     props.showAlert(\"Text is cleared\" , \"success\");\n\n\n   }\n\n   const copyText = () =>{\n    let copyText = document.getElementById(\"message\");\n    navigator.clipboard.writeText(copyText.value);\n    //console.log(\"Text Copied\");\n    props.showAlert(\"Copied to clipboard\" , \"success\");\n   }\n   \n   const removeExtraSpace = () =>{\n    let copyText = document.getElementById(\"message\");\n     let regex =  /\\s+/g;\n     let stringText = copyText.value;\n\n     let trimText = stringText.replace(regex, \" \");\n    // let trimText = stringText.trim();\n         copyText.value = trimText;\n         props.showAlert(\"Extra space removed\" , \"success\");\n\n   } \n\n\n    return (\n<div className=\"maintextform\" >\n<div className=\"my-3  text-container\"  >\n  <h2 htmlFor=\"exampleFormControlTextarea1\" id = \"textHeading\" className=\"form-label\" style={{color:props.textmode===\"light\"?\"black\":\"white\"}}>{props.heading} </h2>\n  <textarea id= \"message\" className=\"form-control\" placeholder = {text}  rows=\"3\"  onChange={onchangehandler} style={{ backgroundColor: props.textmode===\"light\"?\"white\":\"grey\", color:props.textmode===\"light\"?\"black\":\"white\"}}></textarea>\n  <div className='button_sec'>\n  <button type=\"button\" className='btn btn-primary mt-3' onClick={convertUpcase}>Convert to Uppercase</button>\n  <button type=\"button\" className='btn btn-primary mt-3 ms-3' onClick={convertLwcase}>Convert to Lowercase</button>\n  {/* <button type=\"button\" className='btn btn-primary mt-3 ms-3' onClick={submitValue}>Submit</button>  */}\n  <button type=\"button\" className='btn btn-primary mt-3 ms-3' onClick={clearText}>Clear Text</button>\n  <button type=\"button\" className='btn btn-primary mt-3 ms-3' onClick={copyText}>Copy Text</button>\n  <button type=\"button\" className='btn btn-primary mt-3 ms-3' onClick={removeExtraSpace}>Remove Extra Space</button>\n  </div>\n</div>\n  <div className='block_container' id=\"block_main\" style={{color:props.textmode===\"light\"?\"black\":\"white\"}}>\n     <h2>Your text summary here</h2>\n     <p>Total words {(text.split(\" \").length) - 1} and total chracters are {text.length}</p>\n     <p>Time required to read : {.008* text.split(\" \").length }</p>\n     <h2>Preview</h2>\n     <p>{text===\"\"?\"Enter something above to preview it here\":text}</p>\n  </div>\n\n</div>\n    )\n}","import React from 'react'\n\n\nexport default function alert(props) {\n\n\n    const capitalize = (word) =>{\n      //  console.log(word);\n      //   let arr = word.split(\"\");\n      //   let wordS =  arr.slice(0,1);\n      //    let wordC =  wordS.toString().toUpperCase();\n      //    return wordC + word.slice(1);\n\n         return word.charAt(0).toUpperCase() + word.slice(1);\n        \n         \n\n    }\n\n\n  return (\n  props.alert && \n<div className={`alert alert-${props.alert.type} alert-dismissible fade show `} role=\"alert\" >\n  <strong>{capitalize(props.alert.type)} : {props.alert.msg}</strong> \n </div>\n      \n\n  )\n}\n","\nimport './App.css';\nimport './components/index.css';\nimport Navbar from './components/Navbar.js';\nimport Textform from './components/Textform.js';\nimport Alert from './components/alert.js';\n// import About from './components/About.js';\nimport React, {useState} from 'react'\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n\n  const [mode, setMode] = useState (\"light\");\n  const [modeText, setModetext] = useState(\"\");\n  const [alert, setAlert] = useState(null);\n\n  //console.log(alert);\n\n\n\n const toggleMode = () =>{\n    //  removeClass();\n     // console.log(\"theme func\");\n   //   document.body.classList.add('bg-'+cls);\n\n  if (mode === \"light\") {   \n    setMode(\"dark\");\n    showModetext(\"Enable dark mode theme\");\n    document.body.style.backgroundColor = \"#042743\";\n    showAlert(\"Dark mode enabled\" , \"success\");\n    console.log(\"dark executed\");\n    //console.log(document.value);\n    \n  }\n  else  {\n    setMode(\"light\");\n    showModetext(\"Enable light mode theme\");\n    document.body.style.backgroundColor = \"#fff\";\n    showAlert(\"Light mode enabled\", \"warning\");\n    console.log(\"light executed\")\n  \n  }\n\n}\n\n\n\n    const showAlert = (message,type) =>{\n    //  console.log(\"alert triggered\");\n       setAlert ({\n        msg: message,\n        type: type\n       })\n      }\n\n    setTimeout(() =>{\n       setAlert(null);}\n        ,1500)\n\n\n  const showModetext = (message) => {\n        setModetext (message) ;\n       // console.log(message);      \n     }\n\n\n     const removeClass = () =>{\n      document.body.classList.remove('bg-primary');\n      document.body.classList.remove('bg-warning');\n      document.body.classList.remove('bg-success');\n      \n     }\n\n     const colorPallete = (cls) =>{\n      removeClass();\n      // console.log(\"theme func\");\n       document.body.classList.add('bg-'+cls);\n     }\n \n\n\n  return (\n    <>\n       {/* <Router> */}\n      <Navbar title=\"TestUtils\" home=\"Home\" about=\"About\" navMode={mode} theme = {modeText} toggleMode = {toggleMode} pallete= {colorPallete}  />\n      <Alert   alert={alert}/>\n      <div className='main_container'>\n   \n      {/* <Routes>\n          <Route exact path=\"/about\" element={ <About title=\"About Us\" />} />\n          <Route exact path=\"/\" element ={<Textform  heading=\"Enter the text to analyze below\" textmode = {mode} showAlert = {showAlert}/>} />\n        </Routes> */}\n<Textform  heading=\"Enter the text to analyze below\" textmode = {mode} showAlert = {showAlert}/>\n\n      </div>\n      {/* </Router> */}\n    </>\n  );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}